# -*- coding: utf-8 -*-
"""Invasive Species Monitoring.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rlovD3xDL750lVHOhndguF7GhVkbxeA1

# Invasive Species Monitoring

Use CNNs to identify the presence of invasive hydrangea in the given dataset

## Importing libraries
"""

import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from google.colab import drive
drive.mount('/content/drive')

"""### Samples from the training data"""

image=plt.imread('/content/drive/MyDrive/invasive-species-dataset/train/5.jpg')
fig=plt.figure(figsize=(5,10))
_=plt.imshow(image)
_=plt.axis('off')

image=plt.imread('/content/drive/MyDrive/invasive-species-dataset/train/6.jpg')
fig=plt.figure(figsize=(5,10))
_=plt.imshow(image)
_=plt.axis('off')

image=plt.imread('/content/drive/MyDrive/invasive-species-dataset/train/7.jpg')
fig=plt.figure(figsize=(5,10))
_=plt.imshow(image)
_=plt.axis('off')

"""### Importing data and pre-processing"""

traindf=pd.read_csv('/content/drive/MyDrive/invasive-species-dataset/train_labels.csv',dtype=str)

# Alternatively, this dataset can be found at https://www.kaggle.com/c/invasive-species-monitoring/overview

"""Append image extension for complete filename match"""

def append_ext(fn):
    return fn+".jpg"

traindf["name"]=traindf["name"].apply(append_ext)

print(traindf)

"""### Creating the training dataset"""

train_datagen=ImageDataGenerator(rescale=1./255.,validation_split=0.25)

training_set=train_datagen.flow_from_dataframe(
dataframe=traindf,
directory="/content/drive/MyDrive/invasive-species-dataset/train/",
x_col="name",
y_col="invasive",
subset="training",
batch_size=32,
seed=42,
shuffle=True,
class_mode="binary",
target_size=(128,128))

"""### Creating the validation dataset"""

validation_set=train_datagen.flow_from_dataframe(
dataframe=traindf,
directory="/content/drive/MyDrive/invasive-species-dataset/train/",
x_col="name",
y_col="invasive",
subset="validation",
batch_size=32,
seed=42,
shuffle=True,
class_mode="binary",
target_size=(128,128))

"""### Preprocessing the Test set

## Building the CNN
"""

cnn = tf.keras.models.Sequential()

cnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,activation='relu',input_shape=[128,128,3]))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=(2,2),strides=2))

cnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=(2,2),strides=2))

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(units=128,activation='relu'))

cnn.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))

"""## Training"""

cnn.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

cnn.fit(x = training_set,validation_data = validation_set, epochs=20)

"""## Testing on a sample
- Replace the image with any other image path
- This cell predicts whether or not the invasive plant (hydrangea) is present in the input picture
"""

from keras.preprocessing import image

test_img = image.load_img('/content/drive/MyDrive/invasive-species-dataset/test/34.jpg', target_size = (128, 128))
test_img = image.img_to_array(test_img)
# extra dimension added to make a 'batch' with one image in it, axis : where do you want to add the extra dimension
test_img = np.expand_dims(test_img, axis = 0)
result = cnn.predict(test_img)
training_set.class_indices
# [0][0] because result is also in a batch
if result[0][0] == 1: 
  prediction = 'present'
else:
  prediction = 'absent'

print(prediction)

"""## Predicting results for the test set"""

batch_result = []

for i in range(1,1532):
  test_img = image.load_img('/content/drive/MyDrive/invasive-species-dataset/test/' + str(i) + '.jpg', target_size = (128, 128))
  test_img = image.img_to_array(test_img)
  # extra dimension added to make a 'batch' with one image in it, axis : where do you want to add the extra dimension
  test_img = np.expand_dims(test_img, axis = 0)
  result = cnn.predict(test_img)
  batch_result.append({'name': i, 'invasive': result[0][0]})

# result = cnn.predict(test_batch)

print(batch_result)

result_df = pd.DataFrame(batch_result)
result_df.to_csv('submission.csv', index=False)

from google.colab import files
files.download("submission.csv")